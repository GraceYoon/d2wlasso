phenotypes <- t(y)
out.nrow <- nrow(microbes)
out.rownames <- rownames(microbes)
# compute correlation and partial correlation (for taking into account z) between x and y
cor.out <- correlations(microbes,phenotypes,partial=FALSE,ttest=ttest)
parcor.out <- correlations(microbes,phenotypes,partial=TRUE,ttest=ttest)
## Results for testing if a microbe has an effect on phenotype, but NOT
##            accounting for diet
## That is, we test : H_0 : \beta_{x_j}=0
microbe.cor.out.qvalues <- q.computations(cor.out, method=q_method,
plots=plots,file="cor",
pi0.true=pi0.true,pi0.val=pi0.val)
microbe.cor.out <- q.interest(microbe.cor.out.qvalues$qval.mat,alpha=alpha,criteria="less")
out.cor   <- c(0,t(microbe.cor.out$interest))
## Results from Benjamini-Hochberg adjusted p-values when p-values do not account for diet
benhoch.cor.results <- ben.hoch.interest(cor.out$pvalues,alpha=alpha.bh)
out.benhoch.cor <- c(0,t(benhoch.cor.results$interest))
## Results for testing if a microbe has an effect on phenotype, but AFTER
##            accounting for diet
## That is, we test : H_0 : \beta_{x_j|z}=0
# compute q-value as used by JD Storey with some adjustments made
microbe.parcor.out.qvalues <- q.computations(parcor.out,method=q_method,
plots=plots,file="parcor",
pi0.true=pi0.true,pi0.val=pi0.val)
out.qvalue <- c(0,t(microbe.parcor.out.qvalues$qval.mat))
out.pvalue <- c(0,t(parcor.out$pvalues))
q.out <- q.interest(microbe.parcor.out.qvalues$qval.mat,alpha=alpha,criteria="less")
out.parcor <- c(1,t(q.out$interest))
## Results for Benjamini-Hochberg Method ##
benhoch.results <- ben.hoch.interest(parcor.out$pvalues,alpha=alpha.bh)
out.benhoch <- c(1,t(benhoch.results$interest))
out.benhoch.pval.adjust <- c(0,t(benhoch.results$pval.adjust))
if (wt == "one"){
## No weights
weights <- matrix(1,nrow=nrow(microbes)-1,ncol=nrow(phenotypes))
} else if (wt == "adapt"){
## Weights set to absolute value of partial correlations
weights <- parcor.out$estimate
} else if (wt == "q_cor"){
## Weights set to q-values BEFORE taking into account diet
weights <- microbe.cor.out.qvalues$qval.mat
} else {
## Weights set to q-values after taking into account diet
weights <- microbe.parcor.out.qvalues$qval.mat
}
## Weight functions
g1 <- function(x){
return(x)
}
g2 <- function(x){
return(sqrt(x))
}
g3 <- function(x){
return(1/abs(x))
}
g4 <- function(x){
return(x^2)
}
if (weight_fn=="sqrt"){
g <- g2
} else if (weight_fn=="inverse_abs"){
g <- g3
} else if (weight_fn=="square"){
g <- g4
} else {
g <- g1
}
out.w <- as.data.frame(matrix(0,nrow=out.nrow,ncol=1,
dimnames = list(out.rownames,paste("w.delta.",delta,sep=""))))
if (wt == "adapt"){
lasso.w <- lasso.computations(weights,microbes,phenotypes,g3,plots=plots,file="weight_",
include.diet=include.z,diet.wt=z.wt,corr.g=TRUE,
delta=delta)
} else {
lasso.w <- lasso.computations(weights,microbes,phenotypes,g,plots=plots,file="weight_",
include.diet=include.z,diet.wt=z.wt,thresh.q=thresh.q,
delta=delta)
}
out.w <- as.matrix(lasso.w$interest)
## mult.cv.delta.out.w5 : stores results from weighted lasso when weights are set to q-values AFTER taking into account diet,
##           and weight function g1
nsimu = 1; j = 1
mult.cv.delta.out.w5 <- as.data.frame(matrix(0,nrow=out.nrow,ncol=nsimu,
dimnames = list(out.rownames,paste("w5.mult.nsimu.",seq(1,nsimu),sep=""))))
mult.delta.w5 <- as.data.frame(matrix(0, nrow = 1, ncol = ncv,
dimnames = list("delta", seq(1,ncv))))
## mult.cv.delta.out.w6 : stores results from weighted lasso when weights absolute value of partial correlations,
##           and weight function g3
mult.cv.delta.out.w6 <- as.data.frame(matrix(0,nrow=out.nrow,ncol=nsimu,
dimnames = list(out.rownames,paste("w6.mult.nsimu.",seq(1,nsimu),sep=""))))
mult.delta.w6 <- as.data.frame(matrix(0, nrow = 1, ncol = ncv,
dimnames = list("delta", seq(1,ncv))))
if(lasso.delta.cv.mult==TRUE){
include.diet <- TRUE
## Weights set to q-values after taking into account diet
weights <- microbe.parcor.out.qvalues$qval.mat
if (!is.null(delta.cv.seed)){
set.seed(delta.cv.seed)
}
for(v in 1:ncv){
mult.cv.delta.lasso.w5 <- lasso.computations(weights,microbes,phenotypes,g,plots=FALSE,file="weight5_",
include.diet=include.diet,diet.wt=z.wt,thresh.q=thresh.q,delta=delta,
cv.criterion="delta_cv",vfold=vfold)
mult.cv.delta.out.w5[,j] <- mult.cv.delta.out.w5[,j] + as.matrix(mult.cv.delta.lasso.w5$interest)
mult.delta.w5[,v] <- mult.delta.w5[,v] + mult.cv.delta.lasso.w5$delta.out
}
## Weights set to absolute value of partial correlations
weights <- parcor.out$estimate
if (!is.null(delta.cv.seed)){
set.seed(delta.cv.seed)
}
for(v in 1:ncv){
mult.cv.delta.lasso.w6 <- lasso.computations(weights,microbes,phenotypes,g3,plots=FALSE,file="weight6_",
include.diet=include.diet,diet.wt=z.wt,corr.g=TRUE,delta=delta,
cv.criterion="delta_cv",vfold=vfold)
mult.cv.delta.out.w6[,j] <- mult.cv.delta.out.w6[,j] + as.matrix(mult.cv.delta.lasso.w6$interest)
mult.delta.w6[,v] <- mult.delta.w6[,v] + mult.cv.delta.lasso.w6$delta.out
}
}
return(list("qval"=out.qvalue,"BH-pval"=out.benhoch.pval.adjust, "pval"=out.pvalue, "out.cor"=out.cor, "out.parcor"=out.parcor, "out.benhoch.cor"=out.benhoch.cor, "out.benhoch.parcor"=out.benhoch, "out.w"=out.w, "alpha"=alpha, "alpha.bh"=alpha.bh, "delta"=delta, "mult.delta.w5"=mult.delta.w5, "mult.delta.w6"=mult.delta.w6, "mult.cv.delta.out.w5"=mult.cv.delta.out.w5, "mult.cv.delta.out.w6"=mult.cv.delta.out.w6))
}
dwl1 <- d2wlasso(x,z,y,delta=2)
dwl1
dwl1 <- d2wlasso(x,z,y,lasso.delta.cv.mult = TRUE, ncv = 3, delta.cv.seed = 1)
dwl1$mult.delta.w5; dwl1$mult.delta.w6
dwl1$mult.cv.delta.out.w5
dwl1$mult.cv.delta.out.w6
lars1 <- lars(x,y)
library(d2wlasso)
?d2wlasso
library(d2wlasso)
?d2wlasso
remove.packages("d2wlasso")
x=matrix(rnorm(100*10, 0, 1),100,10)
z <- matrix(rbinom(100, 1, 0.5),100,1)
y=matrix(z[,1] + 2*x[,1] - 2*x[,2] + rnorm(100, 0, 2), 100)
dwl1 <- d2wlasso(x,z,y,delta=2)
devtools::install_github("rakheon/d2wlasso", force = TRUE)
dwl1 <- d2wlasso(x,z,y,delta=2)
library(d2wlasso)
dwl1 <- d2wlasso(x,z,y,delta=2)
library(lars)
dwl1 <- d2wlasso(x,z,y,delta=2)
dwl1
?d2wlasso
x=matrix(rnorm(100*5, 0, 1),100,5)
z <- matrix(rbinom(100, 1, 0.5),100,1)
y=matrix(z[,1] + 2*x[,1] - 2*x[,2] + rnorm(100, 0, 2), 100)
dwl0 <- d2wlasso(x,z,y)
dwl0
library(d2wlasso)
library(d2wlasso)
?d2wlasso
library(d2wlasso)
?d2wlasso
x = matrix(rnorm(100*5, 0, 1),100,5)
z = matrix(rbinom(100, 1, 0.5),100,1)
y = matrix(z[,1] + 2*x[,1] - 2*x[,2] + rnorm(100, 0, 1), 100)
dwl0 <- d2wlasso(x,z,y)
dwl0$qval
dwl0$`BH-pval`
dwl0$BH-pval
dwl0$`BH-pval`
dwl0$pval
dwl0$out.cor
dwl0$out.parcor
dwl0$out.benhoch.cor
dwl0$out.benhoch.parcor
dwl0$out.w
dwl0$alpha
dwl0$alpha.bh
dwl0$delta
dwl0$cv.delta.w
dwl0$cv.delta.adapt
dwl1 <- d2wlasso(x,z,y,delta=2)
dwl1$out.cor
dwl1$qval
dwl1$`BH-pval`
dwl2 <- d2wlasso(x,z,y,include.z=FALSE,delta=2)
dwl2$qval
dwl2$pval
dwl2$out.cor
dwl2$out.parcor
dwl2$out.benhoch.cor
dwl2$out.benhoch.parcor
dwl2$out.w
library(d2wlasso)
?d2wlasso
x = matrix(rnorm(100*5, 0, 1),100,5)
z = matrix(rbinom(100, 1, 0.5),100,1)
y = matrix(z[,1] + 2*x[,1] - 2*x[,2] + rnorm(100, 0, 1), 100)
dwl0 <- d2wlasso(x,z,y)
correlations <- function(microbes,phenotypes,partial=FALSE,ttest=FALSE,format.data=TRUE){
## Formatting data
if(format.data==TRUE){
data.phenotypes <- phenotypes[-c(which(rownames(phenotypes)=="Diet"),which(rownames(phenotypes)=="Cohort")),]
} else {
data.phenotypes <- phenotypes
}
data.microbes <- microbes[-which(rownames(microbes)=="Diet"),]
diet <- microbes["Diet",]
# Setting up matrices to store Pearson correlations and p-values
correlation <- store.micropheno(data.microbes,data.phenotypes)
pvalues <- store.micropheno(data.microbes,data.phenotypes)
tvalues <- store.micropheno(data.microbes,data.phenotypes)
# Computing pearson correlations and p-values
for (i in 1: nrow(data.microbes)) {
for(j in 1:nrow(data.phenotypes)) {
if(partial==TRUE){
tmp <- parcorr.pvalue(data.microbes[i,],data.phenotypes[j,],diet,ttest=ttest)
} else {
print(data.phenotypes[j,])
tmp <- corr.pvalue(data.microbes[i,],data.phenotypes[j,],ttest=ttest)
}
correlation[i,j] <- tmp$estimate
pvalues[i,j] <- tmp$p.value
tvalues[i,j] <- tmp$t.stat
}
}
list(estimate = correlation, pvalues = pvalues,tvalues=tvalues)
}
parcorr.pvalue <- function(x,y,z,method="pearson",alternative="two.sided",ttest=FALSE){
x <- as.numeric(x)
y <- as.numeric(y)
z <- as.numeric(z)
xres <- residuals(lm(x~factor(z)))
yres <- residuals(lm(y~factor(z)))
out <- corr.pvalue(xres,yres,method,alternative,ttest=FALSE)
estimate <- out$estimate
if(ttest==FALSE){
p.value <- out$p.value
t.stat <- NULL
} else {
y1 <- y
x1 <- x
summary.out <- summary(lm(y1 ~ factor(z) +  x1))
p.value <- summary.out$coefficients["x1","Pr(>|t|)"]
t.stat <- summary.out$coefficients["x1","t value"]
}
list(p.value=p.value,estimate=estimate,t.stat=t.stat)
}
corr.pvalue <- function(x,y,method="pearson",alternative="two.sided",ttest=FALSE){
x <- as.numeric(x)
y <- as.numeric(y)
out <- cor.test(x,y,alternative=alternative,method=method,na.action=na.omit)
estimate <- out$estimate
if(ttest==FALSE){
p.value <- out$p.value
t.stat=NULL
} else {
y1 <- y
x1 <- x
summary.out <- summary(lm(y1~  x1))
p.value <- summary.out$coefficients["x1","Pr(>|t|)"]
t.stat <- summary.out$coefficients["x1","t value"]
}
list(p.value=p.value,estimate=estimate,t.stat=t.stat)
}
dwl0 <- d2wlasso(x,z,y)
correlations <- function(microbes,phenotypes,partial=FALSE,ttest=FALSE,format.data=TRUE){
## Formatting data
if(format.data==TRUE){
data.phenotypes <- phenotypes[-c(which(rownames(phenotypes)=="Diet"),which(rownames(phenotypes)=="Cohort")),]
} else {
data.phenotypes <- phenotypes
}
data.microbes <- microbes[-which(rownames(microbes)=="Diet"),]
diet <- microbes["Diet",]
# Setting up matrices to store Pearson correlations and p-values
correlation <- store.micropheno(data.microbes,data.phenotypes)
pvalues <- store.micropheno(data.microbes,data.phenotypes)
tvalues <- store.micropheno(data.microbes,data.phenotypes)
# Computing pearson correlations and p-values
for (i in 1: nrow(data.microbes)) {
print(i)
for(j in 1:nrow(data.phenotypes)) {
if(partial==TRUE){
tmp <- parcorr.pvalue(data.microbes[i,],data.phenotypes[j,],diet,ttest=ttest)
} else {
print(data.phenotypes[j,])
tmp <- corr.pvalue(data.microbes[i,],data.phenotypes[j,],ttest=ttest)
}
correlation[i,j] <- tmp$estimate
pvalues[i,j] <- tmp$p.value
tvalues[i,j] <- tmp$t.stat
}
}
list(estimate = correlation, pvalues = pvalues,tvalues=tvalues)
}
dwl0 <- d2wlasso(x,z,y)
library(d2wlasso)
dwl0 <- d2wlasso(x,z,y)
library(d2wlasso)
dwl0 <- d2wlasso(x,z,y)
library(d2wlasso)
dwl0 <- d2wlasso(x,z,y)
z
library(d2wlasso)
dwl0 <- d2wlasso(x,z,y)
dwl0 <- d2wlasso(x,z,y,ttest = T)
library(d2wlasso)
dwl0 <- d2wlasso(x,z,y)
dwl0$qval
dwl0$pval
dwl0$bh.pval
dwl0$out.cor
dwl0$out.parcor
dwl0$out.benhoch.cor
dwl0$out.benhoch.parcor
dwl0$out.w
library(d2wlasso)
dwl0 <- d2wlasso(x,z,y)
?d2wlasso
x = matrix(rnorm(100*5, 0, 1),100,5)
z = matrix(rbinom(100, 1, 0.5),100,1)
y = matrix(z[,1] + 2*x[,1] - 2*x[,2] + rnorm(100, 0, 1), 100)
dwl0 <- d2wlasso(x,z,y)
library(d2wlasso)
dwl0 <- d2wlasso(x,z,y)
dwl0 <- d2wlasso(x,z,y, plots = TRUE)
library(d2wlasso)
dwl0 <- d2wlasso(x,z,y)
dwl0$qval
dwl0$bh.pval
dwl0$pval
dwl0$out.w
dwl0$out.cor
dwl0$out.parcor
dwl0$out.benhoch.cor
dwl0$out.benhoch.parcor
library(d2wlasso)
dwl0 <- d2wlasso(x,z,y)
dwl0$out.cor
dwl0$out.parcor
dwl0 <- d2wlasso(x,z,y,robust = F)
dwl0$out.cor
dwl0$out.parcor
dwl0$out.benhoch.cor
dwl0$out.w
library(d2wlasso)
dwl0 <- d2wlasso(x,z,y)
dwl0 <- d2wlasso(x,z,y,robust = F)
dwl0 <- d2wlasso(x,z,y,wt = "adapt",robust = F)
dwl0$out.w
dwl0$qval
dwl0 <- d2wlasso(x,z,y,wt = "q_cor",robust = F)
dwl0$out.w
dwl0$qval
dwl0 <- d2wlasso(x,z,y,wt = "t_val",robust = F)
dwl0 <- d2wlasso(x,z,y,wt = "parcor",robust = F)
dwl0$out.w
dwl0$qval
dwl0 <- d2wlasso(x,z,y,wt = "p_val",robust = F)
dwl0$out.w
dwl0$qval
dwl0 <- d2wlasso(x,z,y,wt = "p_val")
dwl0$out.w
dwl0$qval
dwl0 <- d2wlasso(x,z,y,wt = "bhp_val")
dwl0$out.w
dwl0$qval
dwl0 <- d2wlasso(x,z,y,wt = "bhp_val", robust = F)
dwl0$out.w
dwl0$qval
library(d2wlasso)
dwl0 <- d2wlasso(x,z,y,wt = "bhp_val", robust = F)
dwl0 <- d2wlasso(x,z,y,wt = "p_val", robust = F)
dwl0 <- d2wlasso(x,z,y,wt = "adapt", robust = F)
dwl0 <- d2wlasso(x,z,y,wt = "q_cor", robust = F)
dwl0 <- d2wlasso(x,z,y,wt = "q_parcor", robust = F)
dwl0 <- d2wlasso(x,z,y,wt = "t_val", robust = F)
library(d2wlasso)
dwl0 <- d2wlasso(x,z,y,wt = "q_parcor", robust = F)
library(d2wlasso)
dwl0 <- d2wlasso(x,z,y,wt = "q_parcor", robust = F)
dwl0 <- d2wlasso(x,z,y,wt = "t_val", robust = F)
dwl0 <- d2wlasso(x,z,y,wt = "t_val", robust = F)
library(d2wlasso)
dwl0 <- d2wlasso(x,z,y,wt = "t_val", robust = F)
dwl0$out.w
dwl0 <- d2wlasso(x,z,y,wt = "t_val")
dwl0$out.w
x = matrix(rnorm(100*5, 0, 1),100,5)
z = matrix(rbinom(100, 1, 0.5),100,1)
y = matrix(z[,1] + 2*x[,1] - 2*x[,2] + rnorm(100, 0, 5), 100)
dwl0 <- d2wlasso(x,z,y)
dwl0$qval
dwl0$out.w
dwl0 <- d2wlasso(x,z,y,wt="t_val")
dwl0$out.w
dwl0 <- d2wlasso(x,z,y,wt="p_val")
dwl0$out.w
dwl0 <- d2wlasso(x,z,y,wt="bjp_val")
dwl0 <- d2wlasso(x,z,y,wt="bhp_val")
dwl0$out.w
dwl0 <- d2wlasso(x,z,y,wt="adapt")
dwl0$out.w
dwl0 <- d2wlasso(x,z,y,wt="q_cor")
dwl0$out.w
dwl0 <- d2wlasso(x,z,y,wt="q_parcor")
dwl0$out.w
library(d2wlasso)
?d2wlasso
dwl4 <- d2wlasso(x,z,y,wt="adapt")
dwl4$out.w
dwl4 <- d2wlasso(x,z,y,wt="t_val")
dwl4$out.w
x = matrix(rnorm(100*20, 0, 1),100,20)
z = matrix(rbinom(100, 1, 0.5),100,1)
y = matrix(z[,1] + 2*x[,1] - 2*x[,2] + rnorm(100, 0, 2), 100)
dwl0 <- d2wlasso(x,z,y)
dwl0$qval
dwl0 <- d2wlasso(x,z,y,robust = F)
dwl0$qval
round(dwl0$qval,4)
dwl0$bh.pval
round(dwl0$bh.pval,4)
round(dwl0$pval,4)
dwl0$out.w
dwl0 <- d2wlasso(x,z,y,robust = F, wt = "t_val")
dwl0$out.w
y = matrix(z[,1] + 1*x[,1] - 1*x[,2] + rnorm(100, 0, 2), 100)
dwl0 <- d2wlasso(x,z,y,robust = F, wt = "t_val")
dwl0$out.w
dwl0 <- d2wlasso(x,z,y,robust = F)
dwl0$out.w
dwl0 <- d2wlasso(x,z,y,robust = F, wt = "parcor")
dwl0$out.w
dwl0 <- d2wlasso(x,z,y,robust = F, wt = "p_val")
dwl0$out.w
dwl0 <- d2wlasso(x,z,y,robust = F, wt = "bhp_val")
dwl0$out.w
dwl0 <- d2wlasso(x,z,y,robust = F, wt = "adapt")
dwl0$out.w
dwl0 <- d2wlasso(x,z,y,robust = T, wt = "t_val")
dwl0$out.w
dwl0 <- d2wlasso(x,z,y,robust = T, wt = "parcor")
dwl0$out.w
dwl0 <- d2wlasso(x,z,y,robust = T, wt = "p_val")
dwl0$out.w
dwl0 <- d2wlasso(x,z,y,robust = T)
dwl0$out.w
x = matrix(rnorm(100*10, 0, 1),100,10)
z = matrix(rbinom(100, 1, 0.5),100,1)
y = matrix(z[,1] + 2*x[,1] - 2*x[,2] + rnorm(100, 0, 3), 100)
dwl0 <- d2wlasso(x,z,y)
dwl0$out.w
dwl0 <- d2wlasso(x,z,y, wt = "t_val")
dwl0$out.w
dwl0 <- d2wlasso(x,z,y, wt = "parcor")
dwl0$out.w
dwl0 <- d2wlasso(x,z,y, wt = "p_val")
dwl0$out.w
dwl0 <- d2wlasso(x,z,y, wt = "bhp_val")
dwl0$out.w
dwl0 <- d2wlasso(x,z,y, wt = "adapt")
dwl0$out.w
dwl0 <- d2wlasso(x,z,y, wt = "q_cor")
dwl0$out.w
x = matrix(rnorm(100*5, 0, 1),100,5)
z = matrix(rbinom(100, 1, 0.5),100,1)
y = matrix(z[,1] + 2*x[,1] - 2*x[,2] + rnorm(100, 0, 3), 100)
dwl0 <- d2wlasso(x,z,y)
dwl0$qval
dwl0 <- d2wlasso(x,z,y, robust = F)
dwl0$qval
round(dwl0$qval,4)
round(dwl0$bh.pval,4)
round(dwl0$pval,4)
round(dwl0$out.cor,4)
round(dwl0$out.parcor,4)
round(dwl0$out.benhoch.cor,4)
round(dwl0$out.benhoch.parcor,4)
round(dwl0$out.w,4)
round(dwl0$alpha,4)
round(dwl0$alpha.bh,4)
round(dwl0$cv.delta.w,4)
x = matrix(rnorm(100*15, 0, 1),100,15)
z = matrix(rbinom(100, 1, 0.5),100,1)
y = matrix(z[,1] + 2*x[,1] - 2*x[,2] + rnorm(100, 0, 3), 100)
dwl0 <- d2wlasso(x,z,y)
dwl0$qval
dwl0$bh.pval
dwl0 <- d2wlasso(x,z,y, robust = F)
dwl0$qval
round(dwl0$qval,4)
round(dwl0$bh.pval,4)
round(dwl0$pval,4)
round(dwl0$out.cor,4)
round(dwl0$out.parcor,4)
round(dwl0$out.benhoch.cor,4)
round(dwl0$out.benhoch.parcor,4)
round(dwl0$out.w,4)
dwl1 <- d2wlasso(x,z,y,robust = )
dwl1 <- d2wlasso(x,z,y,robust = F)
dwl1 <- d2wlasso(x,z,y,robust = F, wt = "t_val")
round(dwl1$out.w,4)
dwl1 <- d2wlasso(x,z,y,robust = F, wt = "parcor")
round(dwl1$out.w,4)
dwl1 <- d2wlasso(x,z,y,robust = F, wt = "p_val")
round(dwl1$out.w,4)
dwl1 <- d2wlasso(x,z,y,robust = F, wt = "p_val")
round(dwl1$out.w,4)
dwl1 <- d2wlasso(x,z,y,robust = F, wt = "bhp_val")
round(dwl1$out.w,4)
dwl5 <- d2wlasso(x,z,y,wt="t_val")
dwl5$out.w
dwl6 <- d2wlasso(x,z,y,wt="q_parcor")
dwl6$out.w
library(d2wlasso)
?d2wlasso
remove.packages("d2wlasso")
