source("../c2plasso/basic_functions.R")
getwd()
source("/Users/junkyungkim/Desktop/ResearchWork/Codes/c2plasso/basic_functions.R")
dat_ss <- as.data.frame(cbind("Ytilde"=y, x, "GENDERb"=dat$GENDERb, "CAPgc"=dat$CAPgc))
lm0 <- lm(dat_ss$Ytilde[dat_ss$CAPgc==0]~dat_ss$Left.Caudate[dat_ss$CAPgc==0])
lm1 <- lm(dat_ss$Ytilde[dat_ss$CAPgc==1]~dat_ss$Left.Caudate[dat_ss$CAPgc==1])
lm2 <- lm(dat_ss$Ytilde[dat_ss$CAPgc==2]~dat_ss$Left.Caudate[dat_ss$CAPgc==2])
dat_ss$CAPgc <- relevel(relevel(as.factor(dat_ss$CAPgc), "1"), "2")
lm0dat <- data.frame("x"=c(1000, 5000), "y"=c(lm0$coefficients[1] + 1000*lm0$coefficients[2] ,lm0$coefficients[1] + 5000*lm0$coefficients[2]), "lm"="lm0")
lm1dat <- data.frame("x"=c(1000, 5000), "y"=c(lm1$coefficients[1] + 1000*lm1$coefficients[2] ,lm1$coefficients[1] + 5000*lm1$coefficients[2]), "lm"="lm1")
lm2dat <- data.frame("x"=c(1000, 5000), "y"=c(lm2$coefficients[1] + 1000*lm2$coefficients[2] ,lm2$coefficients[1] + 5000*lm2$coefficients[2]), "lm"="lm2")
lmdat <- rbind(lm0dat, lm1dat, lm2dat)#, lm3dat)
lmdat$lm <- relevel(relevel(lmdat$lm, "lm1"), "lm2")
dat_ss$CAP <- as.numeric(dat_ss$CAPgc)
dat_ss$CAP[dat_ss$CAPgc==2] = "high"
dat_ss$CAP[dat_ss$CAPgc==1] = "med"
dat_ss$CAP[dat_ss$CAPgc==0] = "low"
dat_ss$CAP <- as.factor(dat_ss$CAP)
dat_ss$CAP <- relevel(relevel(dat_ss$CAP, "med"), "high")
fig_LC <- ggplot(dat_ss, aes(x=Left.Caudate, y=Ytilde, group=CAP, colour=CAP)) + geom_point(aes(shape=CAP, colour=CAP)) + geom_line(data=lmdat[3:4,], aes(x=x, y=y, group= lm), color="blue", size=0.7, linetype="dotted") + geom_line(data=lmdat[5:6,], aes(x=x, y=y, group= lm), color="green", size=0.7, linetype="dashed") + geom_line(data=lmdat[7:8,], aes(x=x, y=y, group= lm), color="red", size=0.7, linetype="solid") + theme_bw() + theme(axis.title = element_blank(),
#axis.text.x = element_blank(),
axis.text = element_text(size=10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
#panel.border = element_blank(),
panel.background = element_blank(),
legend.position="none")
ggplot(dat_ss, aes(x=Left.Caudate, y=Ytilde, group=CAP, colour=CAP)) + geom_point(aes(shape=CAP, colour=CAP)) + geom_line(data=lmdat[3:4,], aes(x=x, y=y, group= lm), color="blue", size=0.7, linetype="dotted") + geom_line(data=lmdat[5:6,], aes(x=x, y=y, group= lm), color="green", size=0.7, linetype="dashed") + geom_line(data=lmdat[7:8,], aes(x=x, y=y, group= lm), color="red", size=0.7, linetype="solid") + theme_bw() + theme(axis.title = element_blank(),
#axis.text.x = element_blank(),
axis.text = element_text(size=10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
#panel.border = element_blank(),
panel.background = element_blank(),
legend.position="none")
dat_ss$CAP
lmdat$lm
lmdat
ggplot(dat_ss, aes(x=Left.Caudate, y=Ytilde, group=CAP, colour=CAP)) + geom_point(aes(shape=CAP, colour=CAP)) + geom_line(data=lmdat[1:2,], aes(x=x, y=y, group= lm), color="blue", size=0.7, linetype="dotted") + geom_line(data=lmdat[3:4,], aes(x=x, y=y, group= lm), color="green", size=0.7, linetype="dashed") + geom_line(data=lmdat[5:6,], aes(x=x, y=y, group= lm), color="red", size=0.7, linetype="solid") + theme_bw() + theme(axis.title = element_blank(),
#axis.text.x = element_blank(),
axis.text = element_text(size=10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
#panel.border = element_blank(),
panel.background = element_blank(),
legend.position="none")
dat_ss
dat
source("/Users/junkyungkim/Desktop/ResearchWork/Codes/c2plasso/basic_functions.R")
dat_ss <- as.data.frame(cbind("Ytilde"=y, x, "GENDERb"=dat$GENDERb, "CAPgc"=dat$CAPgc))
lm0 <- lm(dat_ss$Ytilde[dat_ss$CAPgc==0]~dat_ss$Right.Pallidum[dat_ss$CAPgc==0])
lm1 <- lm(dat_ss$Ytilde[dat_ss$CAPgc==1]~dat_ss$Right.Pallidum[dat_ss$CAPgc==1])
lm2 <- lm(dat_ss$Ytilde[dat_ss$CAPgc==2]~dat_ss$Right.Pallidum[dat_ss$CAPgc==2])
#lm3 <- lm(dat_ss$Ytilde[dat_ss$CAPgc==3]~dat_ss$Left.Caudate[dat_ss$CAPgc==3])
dat_ss$CAPgc <- relevel(relevel(as.factor(dat_ss$CAPgc), "1"), "2")
#dat_ss$CAPgc <- relevel(relevel(relevel(as.factor(dat_ss$CAPgc), "1"), "2"), "3")
lm0dat <- data.frame("x"=c(0, 2500), "y"=c(lm0$coefficients[1] + 0*lm0$coefficients[2] ,lm0$coefficients[1] + 2500*lm0$coefficients[2]), "lm"="lm0")
lm1dat <- data.frame("x"=c(0, 2500), "y"=c(lm1$coefficients[1] + 0*lm1$coefficients[2] ,lm1$coefficients[1] + 2500*lm1$coefficients[2]), "lm"="lm1")
lm2dat <- data.frame("x"=c(0, 2500), "y"=c(lm2$coefficients[1] + 0*lm2$coefficients[2] ,lm2$coefficients[1] + 2500*lm2$coefficients[2]), "lm"="lm2")
#lm3dat <- data.frame("x"=c(1000, 5000), "y"=c(lm3$coefficients[1] + 1000*lm3$coefficients[2] ,lm3$coefficients[1] + 5000*lm3$coefficients[2]), "lm"="lm3")
lmdat <- rbind(lm0dat, lm1dat, lm2dat)#, lm3dat)
lmdat$lm <- relevel(relevel(lmdat$lm, "lm1"), "lm2")
#lmdat$lm <- relevel(relevel(relevel(lmdat$lm, "lm1"), "lm2"), "lm3")
dat_ss$CAP <- as.numeric(dat_ss$CAPgc)
dat_ss$CAP[dat_ss$CAPgc==2] = "high"
dat_ss$CAP[dat_ss$CAPgc==1] = "med"
dat_ss$CAP[dat_ss$CAPgc==0] = "low"
#dat_ss$CAP[dat_ss$CAPgc==0] = "control"
dat_ss$CAP <- as.factor(dat_ss$CAP)
dat_ss$CAP <- relevel(relevel(dat_ss$CAP, "med"), "high")
#dat_ss$CAP <- relevel(relevel(relevel(dat_ss$CAP, "low"), "med"), "high")
ggplot(dat_ss, aes(x=Left.Caudate, y=Ytilde, group=CAP, colour=CAP)) + geom_point(aes(shape=CAP, colour=CAP)) + geom_line(data=lmdat[1:2,], aes(x=x, y=y, group= lm), color="blue", size=0.7, linetype="dotted") + geom_line(data=lmdat[3:4,], aes(x=x, y=y, group= lm), color="green", size=0.7, linetype="dashed") + geom_line(data=lmdat[5:6,], aes(x=x, y=y, group= lm), color="red", size=0.7, linetype="solid") + theme_bw() + theme(axis.title = element_blank(),
#axis.text.x = element_blank(),
axis.text = element_text(size=10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
#panel.border = element_blank(),
panel.background = element_blank(),
legend.position="none")
ggplot(dat_ss, aes(x=Right.Pallidum, y=Ytilde, group=CAP, colour=CAP)) + geom_point(aes(shape=CAP, colour=CAP)) + geom_line(data=lmdat[1:2,], aes(x=x, y=y, group= lm), color="blue", size=0.7, linetype="dotted") + geom_line(data=lmdat[3:4,], aes(x=x, y=y, group= lm), color="green", size=0.7, linetype="dashed") + geom_line(data=lmdat[5:6,], aes(x=x, y=y, group= lm), color="red", size=0.7, linetype="solid") + theme_bw() + theme(axis.title = element_blank(),
#axis.text.x = element_blank(),
axis.text = element_text(size=10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
#panel.border = element_blank(),
panel.background = element_blank(),
legend.position="none")
lm0 <- lm(dat_ss$Ytilde[dat_ss$CAPgc==0]~dat_ss$Left.Caudate[dat_ss$CAPgc==0])
lm1 <- lm(dat_ss$Ytilde[dat_ss$CAPgc==1]~dat_ss$Left.Caudate[dat_ss$CAPgc==1])
lm2 <- lm(dat_ss$Ytilde[dat_ss$CAPgc==2]~dat_ss$Left.Caudate[dat_ss$CAPgc==2])
#lm3 <- lm(dat_ss$Ytilde[dat_ss$CAPgc==3]~dat_ss$Left.Caudate[dat_ss$CAPgc==3])
dat_ss$CAPgc <- relevel(relevel(as.factor(dat_ss$CAPgc), "1"), "2")
#dat_ss$CAPgc <- relevel(relevel(relevel(as.factor(dat_ss$CAPgc), "1"), "2"), "3")
lm0dat <- data.frame("x"=c(0, 600), "y"=c(lm0$coefficients[1] + 0*lm0$coefficients[2] ,lm0$coefficients[1] + 600*lm0$coefficients[2]), "lm"="lm0")
lm1dat <- data.frame("x"=c(0, 600), "y"=c(lm1$coefficients[1] + 0*lm1$coefficients[2] ,lm1$coefficients[1] + 600*lm1$coefficients[2]), "lm"="lm1")
lm2dat <- data.frame("x"=c(0, 600), "y"=c(lm2$coefficients[1] + 0*lm2$coefficients[2] ,lm2$coefficients[1] + 600*lm2$coefficients[2]), "lm"="lm2")
#lm3dat <- data.frame("x"=c(1000, 5000), "y"=c(lm3$coefficients[1] + 1000*lm3$coefficients[2] ,lm3$coefficients[1] + 5000*lm3$coefficients[2]), "lm"="lm3")
lmdat <- rbind(lm0dat, lm1dat, lm2dat)#, lm3dat)
lmdat$lm <- relevel(relevel(lmdat$lm, "lm1"), "lm2")
#lmdat$lm <- relevel(relevel(relevel(lmdat$lm, "lm1"), "lm2"), "lm3")
dat_ss$CAP <- as.numeric(dat_ss$CAPgc)
dat_ss$CAP[dat_ss$CAPgc==2] = "high"
dat_ss$CAP[dat_ss$CAPgc==1] = "med"
dat_ss$CAP[dat_ss$CAPgc==0] = "low"
#dat_ss$CAP[dat_ss$CAPgc==0] = "control"
dat_ss$CAP <- as.factor(dat_ss$CAP)
dat_ss$CAP <- relevel(relevel(dat_ss$CAP, "med"), "high")
#dat_ss$CAP <- relevel(relevel(relevel(dat_ss$CAP, "low"), "med"), "high")
lm0 <- lm(dat_ss$Ytilde[dat_ss$CAPgc==0]~dat_ss$Right.vessel[dat_ss$CAPgc==0])
lm1 <- lm(dat_ss$Ytilde[dat_ss$CAPgc==1]~dat_ss$Right.vessel[dat_ss$CAPgc==1])
lm2 <- lm(dat_ss$Ytilde[dat_ss$CAPgc==2]~dat_ss$Right.vessel[dat_ss$CAPgc==2])
#lm3 <- lm(dat_ss$Ytilde[dat_ss$CAPgc==3]~dat_ss$Left.Caudate[dat_ss$CAPgc==3])
dat_ss$CAPgc <- relevel(relevel(as.factor(dat_ss$CAPgc), "1"), "2")
#dat_ss$CAPgc <- relevel(relevel(relevel(as.factor(dat_ss$CAPgc), "1"), "2"), "3")
lm0dat <- data.frame("x"=c(0, 600), "y"=c(lm0$coefficients[1] + 0*lm0$coefficients[2] ,lm0$coefficients[1] + 600*lm0$coefficients[2]), "lm"="lm0")
lm1dat <- data.frame("x"=c(0, 600), "y"=c(lm1$coefficients[1] + 0*lm1$coefficients[2] ,lm1$coefficients[1] + 600*lm1$coefficients[2]), "lm"="lm1")
lm2dat <- data.frame("x"=c(0, 600), "y"=c(lm2$coefficients[1] + 0*lm2$coefficients[2] ,lm2$coefficients[1] + 600*lm2$coefficients[2]), "lm"="lm2")
#lm3dat <- data.frame("x"=c(1000, 5000), "y"=c(lm3$coefficients[1] + 1000*lm3$coefficients[2] ,lm3$coefficients[1] + 5000*lm3$coefficients[2]), "lm"="lm3")
lmdat <- rbind(lm0dat, lm1dat, lm2dat)#, lm3dat)
lmdat$lm <- relevel(relevel(lmdat$lm, "lm1"), "lm2")
#lmdat$lm <- relevel(relevel(relevel(lmdat$lm, "lm1"), "lm2"), "lm3")
dat_ss$CAP <- as.numeric(dat_ss$CAPgc)
dat_ss$CAP[dat_ss$CAPgc==2] = "high"
dat_ss$CAP[dat_ss$CAPgc==1] = "med"
dat_ss$CAP[dat_ss$CAPgc==0] = "low"
#dat_ss$CAP[dat_ss$CAPgc==0] = "control"
dat_ss$CAP <- as.factor(dat_ss$CAP)
dat_ss$CAP <- relevel(relevel(dat_ss$CAP, "med"), "high")
#dat_ss$CAP <- relevel(relevel(relevel(dat_ss$CAP, "low"), "med"), "high")
ggplot(dat_ss, aes(x=Right.vessel, y=Ytilde, group=CAP, colour=CAP)) + geom_point(aes(shape=CAP, colour=CAP)) + geom_line(data=lmdat[1:2,], aes(x=x, y=y, group= lm), color="blue", size=0.7, linetype="dotted") + geom_line(data=lmdat[3:4,], aes(x=x, y=y, group= lm), color="green", size=0.7, linetype="dashed") + geom_line(data=lmdat[5:6,], aes(x=x, y=y, group= lm), color="red", size=0.7, linetype="solid") + theme_bw() + theme(axis.title = element_blank(),
#axis.text.x = element_blank(),
axis.text = element_text(size=10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
#panel.border = element_blank(),
panel.background = element_blank(),
legend.position="none")
lm0 <- lm(dat_ss$Ytilde[dat_ss$CAPgc==0]~dat_ss$Optic.Chiasm[dat_ss$CAPgc==0])
lm1 <- lm(dat_ss$Ytilde[dat_ss$CAPgc==1]~dat_ss$Optic.Chiasm[dat_ss$CAPgc==1])
lm2 <- lm(dat_ss$Ytilde[dat_ss$CAPgc==2]~dat_ss$Optic.Chiasm[dat_ss$CAPgc==2])
#lm3 <- lm(dat_ss$Ytilde[dat_ss$CAPgc==3]~dat_ss$Left.Caudate[dat_ss$CAPgc==3])
dat_ss$CAPgc <- relevel(relevel(as.factor(dat_ss$CAPgc), "1"), "2")
#dat_ss$CAPgc <- relevel(relevel(relevel(as.factor(dat_ss$CAPgc), "1"), "2"), "3")
lm0dat <- data.frame("x"=c(0, 600), "y"=c(lm0$coefficients[1] + 0*lm0$coefficients[2] ,lm0$coefficients[1] + 600*lm0$coefficients[2]), "lm"="lm0")
lm1dat <- data.frame("x"=c(0, 600), "y"=c(lm1$coefficients[1] + 0*lm1$coefficients[2] ,lm1$coefficients[1] + 600*lm1$coefficients[2]), "lm"="lm1")
lm2dat <- data.frame("x"=c(0, 600), "y"=c(lm2$coefficients[1] + 0*lm2$coefficients[2] ,lm2$coefficients[1] + 600*lm2$coefficients[2]), "lm"="lm2")
#lm3dat <- data.frame("x"=c(1000, 5000), "y"=c(lm3$coefficients[1] + 1000*lm3$coefficients[2] ,lm3$coefficients[1] + 5000*lm3$coefficients[2]), "lm"="lm3")
lmdat <- rbind(lm0dat, lm1dat, lm2dat)#, lm3dat)
lmdat$lm <- relevel(relevel(lmdat$lm, "lm1"), "lm2")
#lmdat$lm <- relevel(relevel(relevel(lmdat$lm, "lm1"), "lm2"), "lm3")
dat_ss$CAP <- as.numeric(dat_ss$CAPgc)
dat_ss$CAP[dat_ss$CAPgc==2] = "high"
dat_ss$CAP[dat_ss$CAPgc==1] = "med"
dat_ss$CAP[dat_ss$CAPgc==0] = "low"
#dat_ss$CAP[dat_ss$CAPgc==0] = "control"
dat_ss$CAP <- as.factor(dat_ss$CAP)
dat_ss$CAP <- relevel(relevel(dat_ss$CAP, "med"), "high")
#dat_ss$CAP <- relevel(relevel(relevel(dat_ss$CAP, "low"), "med"), "high")
ggplot(dat_ss, aes(x=Optic.Chiasm, y=Ytilde, group=CAP, colour=CAP)) + geom_point(aes(shape=CAP, colour=CAP)) + geom_line(data=lmdat[1:2,], aes(x=x, y=y, group= lm), color="blue", size=0.7, linetype="dotted") + geom_line(data=lmdat[3:4,], aes(x=x, y=y, group= lm), color="green", size=0.7, linetype="dashed") + geom_line(data=lmdat[5:6,], aes(x=x, y=y, group= lm), color="red", size=0.7, linetype="solid") + theme_bw() + theme(axis.title = element_blank(),
#axis.text.x = element_blank(),
axis.text = element_text(size=10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
#panel.border = element_blank(),
panel.background = element_blank(),
legend.position="none")
load("Data_Result_lmh_zlinT.Rdata")
cv.lassoint_result$lambda.min
cv.lassoint_result$cvm[which.min(cv.lassoint_result$cvm)]
as.numeric(which(lassoint_result$beta[,which.min(cv.lassoint_result$cvm)]!=0))
lasso_result$beta[,which.min(cv.lasso_result$cvm)]
cv.lasso_result$lambda.min
cv.lasso_result$cvm[which.min(cv.lasso_result$cvm)]
as.numeric(which(lasso_result$beta[,which.min(cv.lasso_result$cvm)]!=0))
lassoint_result$beta[,which.min(cv.lassoint_result$cvm)]
cv.lassoint_result$lambda.min
cv.lassoint_result$cvm[which.min(cv.lassoint_result$cvm)]
as.numeric(which(lassoint_result$beta[,which.min(cv.lassoint_result$cvm)]!=0))
cv.plasso_result$beta_mat[,which.min(cv.plasso_result$cvm)]
cv.plasso_result$theta_mat[,,which.min(cv.plasso_result$cvm)]
cv.plasso_result$beta0_vec[which.min(cv.plasso_result$cvm)]
cv.plasso_result$theta0_vec[,which.min(cv.plasso_result$cvm)]
cv.plasso_result$lambda_min
cv.plasso_result$cvm[which.min(cv.plasso_result$cvm)]
cv.c2plasso_result$beta_mat[,which.min(cv.c2plasso_result$cvm)]
cv.c2plasso_result$theta_mat[,,which.min(cv.c2plasso_result$cvm)]
rm(list=ls(all=TRUE))
load("Data_Result_lmh_zlinT.Rdata")
cv.c2plasso_result$beta_mat[,which.min(cv.c2plasso_result$cvm)]
cv.c2plasso_result$theta_mat[,,which.min(cv.c2plasso_result$cvm)]
lasso_beta
lasso_beta_final <- lasso_beta*(pmax(abs(lasso_beta) - 1.96*lasso_beta_sd, 0) != 0)
lasso_beta_sd_final <- lasso_beta_sd*(pmax(abs(lasso_beta) - 1.96*lasso_beta_sd, 0) != 0)
which(lasso_beta_final!=0)
which(lasso_beta!=0)
lasso_beta_final[6]*sd(x[,6])/sqrt(710/709); lasso_beta_sd_final[6]*sd(x[,6])/sqrt(710/709)
lasso_beta_final[26]*sd(x[,26])/sqrt(710/709); lasso_beta_sd_final[26]*sd(x[,26])/sqrt(710/709)
lasso_beta_final[31]*sd(x[,31])/sqrt(710/709); lasso_beta_sd_final[31]*sd(x[,31])/sqrt(710/709)
lasso_beta_final[36]*sd(x[,36])/sqrt(710/709); lasso_beta_sd_final[36]*sd(x[,36])/sqrt(710/709)
lasso_beta_final[63]*sd(xz[,63])/sqrt(710/709); lasso_beta_sd_final[63]*sd(xz[,63])/sqrt(710/709)
which(lassoint_beta_final!=0)
which(lassoint_beta!=0)
length(lassoint_beta
)
which(lassoint_beta[64:299]!=0)/4
lassoint_beta[which(lassoint_beta!=0)]
lassoint_beta[which(lassoint_beta!=0)]
lassoint_beta_sd[which(lassoint_beta!=0)]
lassoint_beta[which(lassoint_beta!=0)]/lassoint_beta_sd[which(lassoint_beta!=0)]
which(lassoint_beta!=0)
lassoint_beta_final[6]*sd(x[,6])/sqrt(710/709); lassoint_beta_sd_final[6]*sd(x[,6])/sqrt(710/709)
lassoint_beta[6]*sd(x[,6])/sqrt(938/937); lassoint_beta_sd[6]*sd(x[,6])/sqrt(938/937)
lassoint_beta_final[6]*sd(x[,6])/sqrt(710/709); lassoint_beta_sd_final[6]*sd(x[,6])/sqrt(710/709)
lassoint_beta[6]*sd(x[,6])/sqrt(710/709); lassoint_beta_sd[6]*sd(x[,6])/sqrt(710/709)
lassoint_beta_final[26]*sd(x[,26])/sqrt(710/709); lassoint_beta_sd_final[26]*sd(x[,26])/sqrt(710/709)
lassoint_beta[which(lassoint_beta!=0)]/lassoint_beta_sd[which(lassoint_beta!=0)]
lassoint_beta_final[36]*sd(x[,36])/sqrt(710/709); lassoint_beta_sd_final[36]*sd(x[,36])/sqrt(710/709)
lassoint_beta[36]*sd(x[,36])/sqrt(710/709); lassoint_beta_sd[36]*sd(x[,36])/sqrt(710/709)
which(lassoint_beta!=0)
which(lassoint_beta[64:299]!=0)/4
lassoint_beta[which(lassoint_beta!=0)]/lassoint_beta_sd[which(lassoint_beta!=0)]
plasso_beta*(pmax(abs(plasso_beta) - 1.96*plasso_beta_sd, 0) != 0)
plasso_beta_sd*(pmax(abs(plasso_beta) - 1.96*plasso_beta_sd, 0) != 0)
plasso_theta
plasso_beta[6]+plasso_theta[6,4]; plasso_beta[6]+plasso_theta[6,5]
plasso_beta[6]+plasso_theta[6,3]; plasso_beta[6]+plasso_theta[6,4]
sd(plasso_boot_beta[6,]+plasso_boot_theta[6,3,]); sd(plasso_boot_beta[6,]+plasso_boot_theta[6,4,])
plasso_beta[26]+plasso_theta[26,3]; plasso_beta[26]+plasso_theta[26,4]
sd(plasso_boot_beta[26,]+plasso_boot_theta[26,3,]); sd(plasso_boot_beta[26,]+plasso_boot_theta[26,4,])
plasso_beta[31]+plasso_theta[31,3]; plasso_beta[31]+plasso_theta[31,4]
sd(plasso_boot_beta[31,]+plasso_boot_theta[31,3,]); sd(plasso_boot_beta[31,]+plasso_boot_theta[31,4,])
plasso_beta*(pmax(abs(plasso_beta) - 1.96*plasso_beta_sd, 0) != 0)
cv.plasso_result$beta_mat[,which.min(cv.plasso_result$cvm)]
cv.plasso_result$theta_mat[,,which.min(cv.plasso_result$cvm)]
cv.plasso_result$beta0_vec[which.min(cv.plasso_result$cvm)]
cv.plasso_result$theta0_vec[,which.min(cv.plasso_result$cvm)]
plasso_beta0
plasso_theta0
plasso_beta0_sd
plasso_theta0_sd
c2plasso_beta*(pmax(abs(c2plasso_beta) - 1.96*c2plasso_beta_sd, 0) != 0)
c2plasso_beta_sd*(pmax(abs(c2plasso_beta) - 1.96*c2plasso_beta_sd, 0) != 0)
c2plasso_beta[6]+c2plasso_theta[6,4]; c2plasso_beta[6]+c2plasso_theta[6,5]
c2plasso_beta[6]+c2plasso_theta[6,3]; c2plasso_beta[6]+c2plasso_theta[6,4]
sd(c2plasso_boot_beta[6,]+c2plasso_boot_theta[6,3,]); sd(c2plasso_boot_beta[6,]+c2plasso_boot_theta[6,4,])
c2plasso_beta[26]+c2plasso_theta[26,3]; c2plasso_beta[26]+c2plasso_theta[26,4]
sd(c2plasso_boot_beta[26,]+c2plasso_boot_theta[26,3,]); sd(c2plasso_boot_beta[26,]+c2plasso_boot_theta[26,4,])
c2plasso_beta[31]+c2plasso_theta[31,3]; c2plasso_beta[31]+c2plasso_theta[31,4]
sd(c2plasso_boot_beta[31,]+c2plasso_boot_theta[31,3,]); sd(c2plasso_boot_beta[31,]+c2plasso_boot_theta[31,4,])
c2plasso_beta0
c2plasso_theta0
c2plasso_beta0_sd
c2plasso_theta0_sd
c2plasso_beta
c2plasso_beta_sd
c2plasso_beta/c2plasso_beta_sd
rm(list=ls(all=TRUE))
load("Data_Result_lmh_zlinT_age.Rdata")
lasso_beta_final <- lasso_beta*(pmax(abs(lasso_beta) - 1.96*lasso_beta_sd, 0) != 0)
lasso_beta_sd_final <- lasso_beta_sd*(pmax(abs(lasso_beta) - 1.96*lasso_beta_sd, 0) != 0)
which(lasso_beta_final!=0)
which(lasso_beta!=0)
lasso_beta_final[6]*sd(x[,6])/sqrt(710/709); lasso_beta_sd_final[6]*sd(x[,6])/sqrt(710/709)
lasso_beta_final[26]*sd(x[,26])/sqrt(710/709); lasso_beta_sd_final[26]*sd(x[,26])/sqrt(710/709)
lasso_beta_final[31]*sd(x[,31])/sqrt(710/709); lasso_beta_sd_final[31]*sd(x[,31])/sqrt(710/709)
lasso_beta_final[36]*sd(x[,36])/sqrt(710/709); lasso_beta_sd_final[36]*sd(x[,36])/sqrt(710/709)
lasso_beta_final[64]*sd(xz[,64])/sqrt(710/709); lasso_beta_sd_final[64]*sd(xz[,64])/sqrt(710/709)
which(lassoint_beta_final!=0)
which(lassoint_beta!=0)
lassoint_beta[which(lassoint_beta!=0)]/lassoint_beta_sd[which(lassoint_beta!=0)]
length(lassoint_beta)
which(lassoint_beta[65:359]!=0)/5
lassoint_beta_final[6]*sd(x[,6])/sqrt(710/709); lassoint_beta_sd_final[6]*sd(x[,6])/sqrt(710/709)
lassoint_beta[6]*sd(x[,6])/sqrt(710/709); lassoint_beta_sd[6]*sd(x[,6])/sqrt(710/709)
lassoint_beta_final[26]*sd(x[,26])/sqrt(710/709); lassoint_beta_sd_final[26]*sd(x[,26])/sqrt(710/709)
plasso_beta*(pmax(abs(plasso_beta) - 1.96*plasso_beta_sd, 0) != 0)
plasso_beta_sd*(pmax(abs(plasso_beta) - 1.96*plasso_beta_sd, 0) != 0)
plasso_beta[6]+plasso_theta[6,4]; plasso_beta[6]+plasso_theta[6,5]
sd(plasso_boot_beta[6,]+plasso_boot_theta[6,4,]); sd(plasso_boot_beta[6,]+plasso_boot_theta[6,5,])
plasso_beta[26]+plasso_theta[26,4]; plasso_beta[26]+plasso_theta[26,5]
sd(plasso_boot_beta[26,]+plasso_boot_theta[26,4,]); sd(plasso_boot_beta[26,]+plasso_boot_theta[26,5,])
plasso_beta[31]+plasso_theta[31,4]; plasso_beta[31]+plasso_theta[31,5]
sd(plasso_boot_beta[31,]+plasso_boot_theta[31,4,]); sd(plasso_boot_beta[31,]+plasso_boot_theta[31,5,])
plasso_beta[36]+plasso_theta[36,4]; plasso_beta[36]+plasso_theta[36,5];
sd(plasso_boot_beta[36,]+plasso_boot_theta[36,4,]); sd(plasso_boot_beta[36,]+plasso_boot_theta[36,5,])
plasso_beta0
plasso_theta0
plasso_beta0_sd
plasso_theta0_sd
c2plasso_beta*(pmax(abs(c2plasso_beta) - 1.96*c2plasso_beta_sd, 0) != 0)
c2plasso_beta_sd*(pmax(abs(c2plasso_beta) - 1.96*c2plasso_beta_sd, 0) != 0)
c2plasso_theta
c2plasso_beta*(pmax(abs(c2plasso_beta) - 1.96*c2plasso_beta_sd, 0) != 0)
c2plasso_beta_sd*(pmax(abs(c2plasso_beta) - 1.96*c2plasso_beta_sd, 0) != 0)
c2plasso_beta[6]+c2plasso_theta[6,3]; c2plasso_beta[6]+c2plasso_theta[6,4]
sd(c2plasso_boot_beta[6,]+c2plasso_boot_theta[6,3,]); sd(c2plasso_boot_beta[6,]+c2plasso_boot_theta[6,4,])
c2plasso_beta[26]+c2plasso_theta[26,3]; c2plasso_beta[26]+c2plasso_theta[26,4]
sd(c2plasso_boot_beta[26,]+c2plasso_boot_theta[26,3,]); sd(c2plasso_boot_beta[26,]+c2plasso_boot_theta[26,4,])
c2plasso_beta*(pmax(abs(c2plasso_beta) - 1.96*c2plasso_beta_sd, 0) != 0)
c2plasso_beta_sd*(pmax(abs(c2plasso_beta) - 1.96*c2plasso_beta_sd, 0) != 0)
c2plasso_theta
c2plasso_beta*(pmax(abs(c2plasso_beta) - 1.96*c2plasso_beta_sd, 0) != 0)
c2plasso_beta_sd*(pmax(abs(c2plasso_beta) - 1.96*c2plasso_beta_sd, 0) != 0)
c2plasso_beta[6]+c2plasso_theta[6,4]; c2plasso_beta[6]+c2plasso_theta[6,5]
sd(c2plasso_boot_beta[6,]+c2plasso_boot_theta[6,4,]); sd(c2plasso_boot_beta[6,]+c2plasso_boot_theta[6,5,])
c2plasso_beta[26]+c2plasso_theta[26,4]; c2plasso_beta[26]+c2plasso_theta[26,5]
sd(c2plasso_boot_beta[26,]+c2plasso_boot_theta[26,4,]); sd(c2plasso_boot_beta[26,]+c2plasso_boot_theta[26,5,])
c2plasso_beta[31]+c2plasso_theta[31,4]; c2plasso_beta[31]+c2plasso_theta[31,5]
sd(c2plasso_boot_beta[31,]+c2plasso_boot_theta[31,4,]); sd(c2plasso_boot_beta[31,]+c2plasso_boot_theta[31,5,])
c2plasso_beta[36]+c2plasso_theta[36,4]; c2plasso_beta[36]+c2plasso_theta[36,5]
sd(c2plasso_boot_beta[36,]+c2plasso_boot_theta[36,4,]); sd(c2plasso_boot_beta[36,]+c2plasso_boot_theta[36,5,])
c2plasso_beta0
c2plasso_theta0
c2plasso_beta0_sd
c2plasso_theta0_sd
rm(list=ls(all=TRUE))
load("Data_Result_lmh_zlinT_cag.Rdata")
lasso_beta_final <- lasso_beta*(pmax(abs(lasso_beta) - 1.96*lasso_beta_sd, 0) != 0)
lasso_beta_sd_final <- lasso_beta_sd*(pmax(abs(lasso_beta) - 1.96*lasso_beta_sd, 0) != 0)
which(lasso_beta_final!=0)
which(lasso_beta!=0)
lasso_beta_final[6]*sd(x[,6])/sqrt(710/709); lasso_beta_sd_final[6]*sd(x[,6])/sqrt(710/709)
lasso_beta_final[26]*sd(x[,26])/sqrt(710/709); lasso_beta_sd_final[26]*sd(x[,26])/sqrt(710/709)
lasso_beta_final[31]*sd(x[,31])/sqrt(710/709); lasso_beta_sd_final[31]*sd(x[,31])/sqrt(710/709)
lasso_beta_final[36]*sd(x[,36])/sqrt(710/709); lasso_beta_sd_final[36]*sd(x[,36])/sqrt(710/709)
lasso_beta_final[61]*sd(xz[,61])/sqrt(710/709); lasso_beta_sd_final[61]*sd(xz[,61])/sqrt(710/709)
lassoint_beta_final <- lassoint_beta*(pmax(abs(lassoint_beta) - 1.96*lassoint_beta_sd, 0) != 0)
lassoint_beta_sd_final <- lassoint_beta_sd*(pmax(abs(lassoint_beta) - 1.96*lassoint_beta_sd, 0) != 0)
which(lassoint_beta_final!=0)
which(lassoint_beta!=0)
lassoint_beta[which(lassoint_beta!=0)]/lassoint_beta_sd[which(lassoint_beta!=0)]
which(lassoint_beta[65:359]!=0)/5
lassoint_beta_final[6]*sd(x[,6])/sqrt(710/709); lassoint_beta_sd_final[6]*sd(x[,6])/sqrt(710/709)
lassoint_beta[6]*sd(x[,6])/sqrt(710/709); lassoint_beta_sd[6]*sd(x[,6])/sqrt(710/709)
lassoint_beta_final[26]*sd(x[,26])/sqrt(710/709); lassoint_beta_sd_final[26]*sd(x[,26])/sqrt(710/709)
lassoint_beta_final[36]*sd(x[,36])/sqrt(710/709); lassoint_beta_sd_final[36]*sd(x[,36])/sqrt(710/709)
which(lassoint_beta!=0)
lassoint_beta_final[6]*sd(x[,6])/sqrt(710/709); lassoint_beta_sd_final[6]*sd(x[,6])/sqrt(710/709)
lassoint_beta_final[26]*sd(x[,26])/sqrt(710/709); lassoint_beta_sd_final[26]*sd(x[,26])/sqrt(710/709)
lassoint_beta[241]*sd(xzxz[,241])/sqrt(710/709); lassoint_beta_sd[241]*sd(xzxz[,241])/sqrt(710/709)
which(lassoint_beta[65:359]!=0)/5
plasso_beta*(pmax(abs(plasso_beta) - 1.96*plasso_beta_sd, 0) != 0)
plasso_beta_sd*(pmax(abs(plasso_beta) - 1.96*plasso_beta_sd, 0) != 0)
plasso_beta[6]+plasso_theta[6,4]; plasso_beta[6]+plasso_theta[6,5]
sd(plasso_boot_beta[6,]+plasso_boot_theta[6,4,]); sd(plasso_boot_beta[6,]+plasso_boot_theta[6,5,])
plasso_beta[26]+plasso_theta[26,4]; plasso_beta[26]+plasso_theta[26,5]
sd(plasso_boot_beta[26,]+plasso_boot_theta[26,4,]); sd(plasso_boot_beta[26,]+plasso_boot_theta[26,5,])
plasso_beta[36]+plasso_theta[36,4]; plasso_beta[36]+plasso_theta[36,5];
sd(plasso_boot_beta[36,]+plasso_boot_theta[36,4,]); sd(plasso_boot_beta[36,]+plasso_boot_theta[36,5,])
plasso_beta[31]+plasso_theta[31,4]; plasso_beta[31]+plasso_theta[31,5]
sd(plasso_boot_beta[31,]+plasso_boot_theta[31,4,]); sd(plasso_boot_beta[31,]+plasso_boot_theta[31,5,])
plasso_beta0
plasso_theta0
plasso_beta0_sd
plasso_theta0_sd
c2plasso_beta*(pmax(abs(c2plasso_beta) - 1.96*c2plasso_beta_sd, 0) != 0)
c2plasso_beta_sd*(pmax(abs(c2plasso_beta) - 1.96*c2plasso_beta_sd, 0) != 0)
plasso_theta
c2plasso_beta*(pmax(abs(c2plasso_beta) - 1.96*c2plasso_beta_sd, 0) != 0)
c2plasso_beta_sd*(pmax(abs(c2plasso_beta) - 1.96*c2plasso_beta_sd, 0) != 0)
c2plasso_beta[6]+c2plasso_theta[6,4]; c2plasso_beta[6]+c2plasso_theta[6,5]
sd(c2plasso_boot_beta[6,]+c2plasso_boot_theta[6,4,]); sd(c2plasso_boot_beta[6,]+c2plasso_boot_theta[6,5,])
c2plasso_beta[26]+c2plasso_theta[26,4]; c2plasso_beta[26]+c2plasso_theta[26,5]
sd(c2plasso_boot_beta[26,]+c2plasso_boot_theta[26,4,]); sd(c2plasso_boot_beta[26,]+c2plasso_boot_theta[26,5,])
c2plasso_beta[36]+c2plasso_theta[36,4]; c2plasso_beta[36]+c2plasso_theta[36,5]
sd(c2plasso_boot_beta[36,]+c2plasso_boot_theta[36,4,]); sd(c2plasso_boot_beta[36,]+c2plasso_boot_theta[36,5,])
c2plasso_beta[31]+c2plasso_theta[31,4]; c2plasso_beta[31]+c2plasso_theta[31,5]
sd(c2plasso_boot_beta[31,]+c2plasso_boot_theta[31,4,]); sd(c2plasso_boot_beta[31,]+c2plasso_boot_theta[31,5,])
c2plasso_beta0
c2plasso_theta0
c2plasso_beta0_sd
c2plasso_theta0_sd
c2plasso_theta
rm(list=ls(all=TRUE))
load("Data_Result_lmh_zlinT_agecag.Rdata")
lasso_beta_final <- lasso_beta*(pmax(abs(lasso_beta) - 1.96*lasso_beta_sd, 0) != 0)
lasso_beta_sd_final <- lasso_beta_sd*(pmax(abs(lasso_beta) - 1.96*lasso_beta_sd, 0) != 0)
which(lasso_beta_final!=0)
which(lasso_beta!=0)
lasso_beta_final[6]*sd(x[,6])/sqrt(710/709); lasso_beta_sd_final[6]*sd(x[,6])/sqrt(710/709)
lasso_beta_final[26]*sd(x[,26])/sqrt(710/709); lasso_beta_sd_final[26]*sd(x[,26])/sqrt(710/709)
lasso_beta_final[31]*sd(x[,31])/sqrt(710/709); lasso_beta_sd_final[31]*sd(x[,31])/sqrt(710/709)
lasso_beta_final[36]*sd(x[,36])/sqrt(710/709); lasso_beta_sd_final[36]*sd(x[,36])/sqrt(710/709)
lasso_beta_final[61]*sd(xz[,61])/sqrt(710/709); lasso_beta_sd_final[61]*sd(xz[,61])/sqrt(710/709)
lasso_beta_final[64]*sd(xz[,64])/sqrt(710/709); lasso_beta_sd_final[64]*sd(xz[,64])/sqrt(710/709)
lassoint_beta_final <- lassoint_beta*(pmax(abs(lassoint_beta) - 1.96*lassoint_beta_sd, 0) != 0)
lassoint_beta_sd_final <- lassoint_beta_sd*(pmax(abs(lassoint_beta) - 1.96*lassoint_beta_sd, 0) != 0)
which(lassoint_beta_final!=0)
which(lassoint_beta!=0)
lassoint_beta[which(lassoint_beta!=0)]/lassoint_beta_sd[which(lassoint_beta!=0)]
which(lassoint_beta[65:359]!=0)/5
plasso_beta*(pmax(abs(plasso_beta) - 1.96*plasso_beta_sd, 0) != 0)
plasso_beta_sd*(pmax(abs(plasso_beta) - 1.96*plasso_beta_sd, 0) != 0)
plasso_theta
load("Data_Result_lmh_zlinT.Rdata")
as.numeric(which(lasso_result$beta[,which.min(cv.lasso_result$cvm)]!=0))
cv.lasso_result$cvm[which.min(cv.lasso_result$cvm)]
cv.lassoint_result$cvm[which.min(cv.lassoint_result$cvm)]
cv.plasso_result$cvm[which.min(cv.plasso_result$cvm)]
cv.c2plasso_result$cvm[which.min(cv.c2plasso_result$cvm)]
save.image("Data_Result_lmh_zlinT_age.Rdata")
cv.lasso_result$cvm[which.min(cv.lasso_result$cvm)]
cv.lassoint_result$cvm[which.min(cv.lassoint_result$cvm)]
cv.plasso_result$cvm[which.min(cv.plasso_result$cvm)]
cv.c2plasso_result$cvm[which.min(cv.c2plasso_result$cvm)]
load("Data_Result_lmh_zlinT_age.Rdata")
cv.lasso_result$cvm[which.min(cv.lasso_result$cvm)]
rm(list=ls(all=TRUE))
load("Data_Result_lmh_zlinT_age.Rdata")
cv.lasso_result$cvm[which.min(cv.lasso_result$cvm)]
cv.lassoint_result$cvm[which.min(cv.lassoint_result$cvm)]
cv.plasso_result$cvm[which.min(cv.plasso_result$cvm)]
load("Data_Result_lmh_zlinT_cag.Rdata")
cv.lasso_result$cvm[which.min(cv.lasso_result$cvm)]
cv.lassoint_result$cvm[which.min(cv.lassoint_result$cvm)]
cv.plasso_result$cvm[which.min(cv.plasso_result$cvm)]
cv.c2plasso_result$cvm[which.min(cv.c2plasso_result$cvm)]
getwd()
load("Data_Result_lmh_zlinF.Rdata")
cv.lasso_result$cvm[which.min(cv.lasso_result$cvm)]
cv.lassoint_result$cvm[which.min(cv.lassoint_result$cvm)]
cv.plasso_result$cvm[which.min(cv.plasso_result$cvm)]
cv.c2plasso_result$cvm[which.min(cv.c2plasso_result$cvm)]
load("Data_Result_lmh_zlinF_age.Rdata")
cv.lasso_result$cvm[which.min(cv.lasso_result$cvm)]
cv.lassoint_result$cvm[which.min(cv.lassoint_result$cvm)]
cv.plasso_result$cvm[which.min(cv.plasso_result$cvm)]
cv.c2plasso_result$cvm[which.min(cv.c2plasso_result$cvm)]
load("Data_Result_lmh_zlinF_cag.Rdata")
cv.lasso_result$cvm[which.min(cv.lasso_result$cvm)]
cv.lassoint_result$cvm[which.min(cv.lassoint_result$cvm)]
cv.plasso_result$cvm[which.min(cv.plasso_result$cvm)]
cv.c2plasso_result$cvm[which.min(cv.c2plasso_result$cvm)]
rm(list=ls(all=TRUE))
load("Data_Result_lmh_zlinT_cag.Rdata")
lasso_result$beta[,which.min(cv.lasso_result$cvm)]
cv.lasso_result$lambda.min
cv.lasso_result$cvm[which.min(cv.lasso_result$cvm)]
as.numeric(which(lasso_result$beta[,which.min(cv.lasso_result$cvm)]!=0))
lassoint_result$beta[,which.min(cv.lassoint_result$cvm)]
cv.lassoint_result$lambda.min
cv.lassoint_result$cvm[which.min(cv.lassoint_result$cvm)]
as.numeric(which(lassoint_result$beta[,which.min(cv.lassoint_result$cvm)]!=0))
cv.plasso_result$beta_mat[,which.min(cv.plasso_result$cvm)]
cv.plasso_result$theta_mat[,,which.min(cv.plasso_result$cvm)]
cv.plasso_result$beta0_vec[which.min(cv.plasso_result$cvm)]
cv.plasso_result$theta0_vec[,which.min(cv.plasso_result$cvm)]
cv.plasso_result$lambda_min
cv.plasso_result$cvm[which.min(cv.plasso_result$cvm)]
cv.c2plasso_result$beta_mat[,which.min(cv.c2plasso_result$cvm)]
cv.c2plasso_result$theta_mat[,,which.min(cv.c2plasso_result$cvm)]
cv.c2plasso_result$beta0_vec[which.min(cv.c2plasso_result$cvm)]
cv.c2plasso_result$theta0_vec[,which.min(cv.c2plasso_result$cvm)]
cv.c2plasso_result$lambda_min
cv.c2plasso_result$cvm[which.min(cv.c2plasso_result$cvm)]
lasso_result$beta[,which.min(cv.lasso_result$cvm)]
cv.lasso_result$lambda.min
cv.lasso_result$cvm[which.min(cv.lasso_result$cvm)]
apply(x, 2, sd)
lasso_result$beta[,which.min(cv.lasso_result$cvm)]
apply(xz, 2, sd)
lasso_result$beta[,which.min(cv.lasso_result$cvm)]
lasso_result$beta[,which.min(cv.lasso_result$cvm)]*apply(xz, 2, sd)/sqrt(710/709)
lasso_beta_final[6]*sd(x[,6])/sqrt(710/709); lasso_beta_sd_final[6]*sd(x[,6])/sqrt(710/709)
lassoint_result$beta[,which.min(cv.lassoint_result$cvm)]*apply(xzxz, 2, sd)/sqrt(710/709)
length(lassoint_result$beta[,which.min(cv.lassoint_result$cvm)])
length(apply(xzxz, 2, sd))
cbind(lasso_result$beta[,which.min(cv.lasso_result$cvm)]*apply(xz, 2, sd)/sqrt(710/709), lassoint_result$beta[1:64,which.min(cv.lassoint_result$cvm)]*apply(xzxz[1:64], 2, sd)/sqrt(710/709))
cbind(lasso_result$beta[,which.min(cv.lasso_result$cvm)]*apply(xz, 2, sd)/sqrt(710/709), lassoint_result$beta[1:64,which.min(cv.lassoint_result$cvm)]*apply(xzxz[,1:64], 2, sd)/sqrt(710/709))
z
plot(dat$TOTAL_MOTOR_SCORE~z$CAPgc1+z$CAPgc2)
cbind(lasso_result$beta[,which.min(cv.lasso_result$cvm)]*apply(xz, 2, sd)/sqrt(710/709), lassoint_result$beta[1:64,which.min(cv.lassoint_result$cvm)]*apply(xzxz[,1:64], 2, sd)/sqrt(710/709))
lassoint_result$beta[,which.min(cv.lassoint_result$cvm)]*apply(xzxz, 2, sd)/sqrt(710/709)
cbind(lasso_result$beta[,which.min(cv.lasso_result$cvm)]*apply(xz, 2, sd)/sqrt(710/709), lassoint_result$beta[1:64,which.min(cv.lassoint_result$cvm)]*apply(xzxz[,1:64], 2, sd)/sqrt(710/709))
colnames(x)
text(colnames(x))
?text
colnames(z)
rep(colnames(z), length(colnames(x)))
rep(colnames(z), length(colnames(z)))
?rep
rep(colnames(x), times=length(colnames(z)))
rep(colnames(x), each=length(colnames(z)))
rep(colnames(x), each=length(colnames(z)))
rep(colnames(z), length(colnames(x)))
xname <- rep(colnames(x), each=length(colnames(z)))
zname <- rep(colnames(z), length(colnames(x)))
c(rep("",64), rep(colnames(x), each=length(colnames(z))))
xname <- c(rep("",64), rep(colnames(x), each=length(colnames(z))))
zname <- c(rep("",64), rep(colnames(z), length(colnames(x))))
cbind(xname, zname, lassoint_result$beta[,which.min(cv.lassoint_result$cvm)]*apply(xzxz, 2, sd)/sqrt(710/709))
lassoint_result$beta[,which.min(cv.lassoint_result$cvm)]
cv.lassoint_result$lambda.min
cv.lassoint_result$cvm[which.min(cv.lassoint_result$cvm)]
as.numeric(which(lassoint_result$beta[,which.min(cv.lassoint_result$cvm)]!=0))
cbind(xname, zname, lassoint_result$beta[,which.min(cv.lassoint_result$cvm)]*apply(xzxz, 2, sd)/sqrt(710/709))[as.numeric(which(lassoint_result$beta[,which.min(cv.lassoint_result$cvm)]!=0)),]
cbind(xname, zname, round(lassoint_result$beta[,which.min(cv.lassoint_result$cvm)]*apply(xzxz, 2, sd)/sqrt(710/709))[as.numeric(which(lassoint_result$beta[,which.min(cv.lassoint_result$cvm)]!=0)),],3))
cbind(xname, zname, round(lassoint_result$beta[,which.min(cv.lassoint_result$cvm)]*apply(xzxz, 2, sd)/sqrt(710/709)),3)[as.numeric(which(lassoint_result$beta[,which.min(cv.lassoint_result$cvm)]!=0))])
cbind(xname, zname, round(lassoint_result$beta[,which.min(cv.lassoint_result$cvm)]*apply(xzxz, 2, sd)/sqrt(710/709),3)[as.numeric(which(lassoint_result$beta[,which.min(cv.lassoint_result$cvm)]!=0))])
cbind(xname, zname, lassoint_result$beta[,which.min(cv.lassoint_result$cvm)]*apply(xzxz, 2, sd)/sqrt(710/709)[as.numeric(which(lassoint_result$beta[,which.min(cv.lassoint_result$cvm)]!=0))])
cbind(xname, zname, lassoint_result$beta[,which.min(cv.lassoint_result$cvm)]*apply(xzxz, 2, sd)/sqrt(710/709))[as.numeric(which(lassoint_result$beta[,which.min(cv.lassoint_result$cvm)]!=0)),]
cbind(xname, zname, round(lassoint_result$beta[,which.min(cv.lassoint_result$cvm)]*apply(xzxz, 2, sd)/sqrt(710/709)),3)[as.numeric(which(lassoint_result$beta[,which.min(cv.lassoint_result$cvm)]!=0)),]
cbind(xname, zname, lassoint_result$beta[,which.min(cv.lassoint_result$cvm)]*apply(xzxz, 2, sd)/sqrt(710/709))[as.numeric(which(lassoint_result$beta[,which.min(cv.lassoint_result$cvm)]!=0)),]
cbind(xname, zname, lassoint_result$beta[,which.min(cv.lassoint_result$cvm)]*apply(xzxz, 2, sd)/sqrt(710/709))[as.numeric(which(lassoint_result$beta[,which.min(cv.lassoint_result$cvm)]!=0)),]
cv.plasso_result$beta_mat[,which.min(cv.plasso_result$cvm)]
cv.plasso_result$theta_mat[,,which.min(cv.plasso_result$cvm)]
cbind(colnames(x),cv.plasso_result$beta_mat[,which.min(cv.plasso_result$cvm)])
cv.plasso_result$theta_mat[,,which.min(cv.plasso_result$cvm)]
cv.plasso_result$beta0_vec[which.min(cv.plasso_result$cvm)]
cv.plasso_result$theta0_vec[,which.min(cv.plasso_result$cvm)]
cv.plasso_result$lambda_min
cv.c2plasso_result$lambda_min
